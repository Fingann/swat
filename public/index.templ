package public

templ Index(err string) {
    @Base(IndexPage(err))
}

// Define a component for a single task
templ Task(title string, imgSrc string, link string) {
    <div class="w-full p-2" x-data="{ hover: false }">
        <div class="bg-gray-200 p-4 rounded-lg shadow-lg" x-on:mouseenter="hover = true" x-on:mouseleave="hover = false">
            <h2 class="text-xl font-bold mb-2 text-gray-800">{title}</h2>
            <div class="relative">
                <img src={imgSrc} class="w-full  rounded-lg" :class="{'grayscale': !hover}" />
                <button hx-get={link} hx-target="#main"  hx-swap="innerHTML" hx-push-url="true" hx-replace-url="true" class="block text-blue-500 hover:underline absolute inset-0 flex items-center justify-center opacity-0" :class="{'opacity-100': hover}" style="background-color: rgba(0,0,0,0.5); color: white;">Go to Task</button>
            </div>
        </div>
    </div>
}

// IndexPage shows boxes for every task with a title, picture, and a link to the task
templ IndexPage(err string) {
    <div id="root" class="mt-10 flex items-center justify-center bg-gray-100">
        <div class="w-8/ bg-white p-4 rounded-lg shadow-lg">
            <h1 class="text-2xl font-bold text-gray-800">Tasks</h1>
            <div class="mt-4">
                <div class="grid md:grid-cols-2 sm:grid-cols-1 lg:grid-cols-3 -mx-2">
                    // Use the Task component for each task
                    @Task("Injection", "/static/dist/images/sqlinjection.webp", "/injection")
                    @Task("XSS", "/static/dist/images/xsstask.webp", "/xss")
                    @Task("Path Traversal", "/static/dist/images/pathtraversal.webp", "/traversal")
                    @Task("Hardcoded", "/static/dist/images/hardcoded.webp", "/hardcoded")
                    @Task("Validation", "/static/dist/images/validation.webp", "/validation")
                    @Task("Cmonster", "/static/dist/images/cmonster.webp", "/cmonster")
                    @Task("Security", "/static/dist/images/security.webp", "/security")
                    @Task("Generic", "/static/dist/images/generictask.webp", "/traversal")
                    // Add more tasks as needed using the Task component
                </div>
            </div>
        </div>
    </div>
}


templ Submit() {
    <div x-data="{ taskName: '', submitSuccess: false }">
        <form id="flag-submit-form" @submit.prevent="submitFlag">
            <label for="flag" class="block text-sm font-medium text-gray-700">Flag:</label>
            <div class="mt-1">
                <input type="text" id="flag" name="flag" class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md" placeholder="Enter flag here">
            </div>
            <button type="submit" class="mt-2 px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700">Submit Flag</button>
        </form>
        <div x-show="submitSuccess" class="mt-3 text-green-600">
            Task Submitted Successfully: <span x-text="taskName"></span>
        </div>
        <div x-show="taskName === '' && submitSuccess" class="mt-3 text-red-600">
            Submission failed or task does not exist.
        </div>
    </div>

<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('submitFlag', () => ({
            submitSuccess: false,
            taskName: '',
            submitFlag() {
                const formData = new FormData(document.querySelector('#flag-submit-form'));
                fetch('/flag/submit', {
                    method: 'POST',
                    body: formData,
                })
                .then(response => {
                    if (!response.ok && response.status === 404) {
                        throw new Error('Task not found');
                    }
                    return response.json();
                })
                .then(data => {
                    this.taskName = data.name;
                    localStorage.setItem(data.name, 'done');
                    this.submitSuccess = true;
                })
                .catch(error => {
                    console.error('Error submitting flag:', error);
                    this.submitSuccess = false;
                });
            },
        }));
    });
</script>
}


