package public
templ Index(err string) {
    @Base(IndexPage(err))
}

// Define a component for a single task
templ Task(title string, imgSrc string, link string) {
    <div class="w-full p-2" x-data="{ hover: false, isDone: false }" x-init={`isDone = localStorage.getItem("`+ title +`") === 'done'`} @updatecompleted.window={`console.log($event,' yolo'); if ($event.detail === "`+ title +`"){  isDone = true} `}>
        <div class="bg-gray-200 p-4 rounded-lg shadow-lg relative" x-on:mouseenter="hover = true" x-on:mouseleave="hover = false">
            <h2 class="text-xl font-bold mb-2 text-gray-800">
                {title}
                <span x-show.important="isDone" :class="{ 'hide': !isDone }" class="hide text-green-500 ml-2">[Completed &#10004;]</span> <!-- Checkmark when task is done -->
            </h2>
<div class="relative">
    <img src={imgSrc} class="w-full rounded-lg" :class="{'grayscale': !hover}" />
    <button hx-get={link} hx-target="#main" hx-swap="innerHTML" hx-push-url="true" hx-replace-url="true"
            class="absolute inset-0 w-full h-full flex items-center justify-center text-blue-500 hover:underline opacity-0"
            :class="{'opacity-100': hover}"
            style="background-color: rgba(0,0,0,0.5); color: white;">
        Go to Task
    </button>
</div>

        </div>
    </div>
}

// IndexPage shows boxes for every task with a title, picture, and a link to the task
templ IndexPage(err string) {
    <div id="root" class="flex flex-col items-center justify-center bg-gray-100">
        @Submit()
        <div class="bg-gray-100 p-4 rounded-lg shadow-lg">
            <h1 class="text-2xl font-bold text-gray-800">Tasks</h1>
            <div class="mt-4">
                <div class="grid md:grid-cols-2 sm:grid-cols-1 lg:grid-cols-3 -mx-2">
                    // Use the Task component for each task
                    @Task("Security", "/static/dist/images/security.webp", "/security")
                    @Task("Injection", "/static/dist/images/sqlinjection.webp", "/injection")
                    @Task("Validation", "/static/dist/images/validation.webp", "/validation")
                    @Task("Hardcoded", "/static/dist/images/hardcoded.webp", "/hardcoded")
                    @Task("XSS", "/static/dist/images/xsstask.webp", "/xss")
                    @Task("Path Traversal", "/static/dist/images/pathtraversal.webp", "/traversal")
                    @Task("Cmonster", "/static/dist/images/cmonster.webp", "/cmonster")
                    // @Task("Generic", "/static/dist/images/generictask.webp", "/traversal")
                    // Add more tasks as needed using the Task component
                </div>
            </div>
        </div>
    </div>
}


templ Submit() {
<script>
    function submitFlag() {
        flagInput = document.getElementById('flag');
        const formData = new FormData(document.querySelector('#flag-submit-form'));
        fetch('/flag/submit', {
            method: 'POST',
            body: formData,
        })
        .then(response => {
            if (!response.ok) {
                // Add borderClass to input
                flagInput.classList.add('border-red-500');
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            localStorage.setItem(data.name, 'done');
            dispatchEvent(new CustomEvent('updatecompleted', { detail: data.name }));
            flagInput.classList.remove('border-red-500');
            Swal.fire({
                            title: 'Success!',
                            text: 'You have completed the task ' + data.name,
                            icon: 'success',
                            confirmButtonColor: '#3085d6',
                            })
        })
        .catch(error => {
            console.error('Error submitting flag:', error);
            flagInput.classList.add('border-red-500');
        });
    }
</script>

<div class="bg-white w-8/12 mt-5"
 x-data="{ flag: '', submissionStatus: 'notSubmitted' }">
  <form id="flag-submit-form" @submit.prevent="submitFlag" class="flex items-center bg-white rounded-md overflow-hidden shadow-sm">
      <label for="flag" class="sr-only">Flag:</label>
      <input type="text" x-model="flag" id="flag" name="flag" placeholder="Enter flag here"
             class="flex-1 px-4 text-sm focus:ring-0 focus:outline-none border-2"
             style="padding-top: 0.64rem; padding-bottom: 0.864rem;" required/>
      <button type="submit" class="px-4 py-3 bg-indigo-600 text-white text-sm rounded-r-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-50">
          Submit Flag
      </button>

  </form>
</div>
}


