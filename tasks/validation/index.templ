package validation 

import "fmt"

script updateShoppingCart() {
    // update the shopping cart sum
   
    return cartValue;
}

templ ValidatePage() {
  <script>
  // Alpine.js store for the shopping cart value
  document.addEventListener('alpine:init', () => {
    Alpine.store('cart', {
        value: 0,
    });
});
    </script>
<div id="root"> 
  <div class="bg-gray-100 mt-10" x-data="{ cartvalue: $store.cart.value }" @cartppdate.window="
    cartvalue = 0; 
    const {id, value} = $event.detail;
    document.querySelectorAll('input[data-price]').forEach(input => {
        if (input.getAttribute('data-product-id') === id) {
            const price = parseFloat(input.getAttribute('data-price'));
            cartvalue += price * value;
            return;
        }
        const price = parseFloat(input.getAttribute('data-price'));
        const quantity = parseInt(input.value) || 0;
        cartvalue += price * quantity;
    });
    Alpine.store('cart').value = cartvalue;
">
    <div class="max-w-4xl mx-auto px-4">
      <!-- Header Section for Total Cash and Cart Value -->
<div class="flex flex-col space-y-4 mb-2">
    <div class="bg-gray-200 p-4 rounded-lg shadow">
        <h2 class="text-2xl font-bold text-gray-800">Available Balance</h2>
        <p class="text-lg text-gray-600 mt-2">Your total cash available:</p>
        <p class="text-3xl font-semibold text-blue-600">$<span id="total-cash" hx-get="/validation/api/available" hx-trigger="load, update-total-cash" hc-swap="innerHTML">0</span></p>
    </div>

    <div class="flex items-center justify-between bg-gray-200 p-4 rounded-lg shadow">
        <div>
            <h2 class="text-2xl font-bold text-gray-800">Cart Total</h2>
            <p class="text-lg text-gray-600">Current value of your shopping cart:</p>
            <p class="text-3xl font-semibold text-green-600">$<span id="checkout-sum" x-text="$store.cart.value"></span></p>
        </div>
        <button id="buy-button" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded transition duration-150 ease-in-out">
            Buy Now
        </button>
        @BuyButtonClick()
    </div>
</div>


      <!-- Products Display Section -->
      <div id="items" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-6" hx-get="/validation/products" hx-trigger="load" hc-swap="innerHTML">
        <!-- Items will be displayed here -->
      </div>
    </div>
  </div>
</div>
}


type ProductData struct {
    Id string
    Name string
    ImageBase64 string
    Price string
    Description string

}

templ Products(products []ProductData){
        for _,product:= range products {
            @Product(product)
        }
}


templ Product(product ProductData) {
    <div class="bg-white rounded-lg shadow-md p-6 max-w-md mx-auto mb-6">
        <h3 class="text-lg font-semibold text-gray-900">{product.Name}</h3>
        <img src={"data:image/png;base64, " + product.ImageBase64} alt={product.Name} class="rounded-lg mt-4 mb-4"/>
        <p class="text-lg font-bold text-gray-900 mb-4">Price: ${product.Price}</p>
        <p class="text-gray-700 mb-4">{product.Description}</p>
        <!-- Quantity Incrementer -->
        <form class="max-w-xs mx-auto" x-data="{ value: 0 }">
            <label for={product.Id} class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Choose quantity:</label>
            <div class="relative flex items-center max-w-[8rem]">
                <button 
                @click={fmt.Sprintf("value = Math.max(value - 1, 0); $dispatch('cartppdate', {id: '%s', value: value})", product.Id)}
                type="button" class="decrement-button bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 border border-gray-300 rounded-l-lg p-3 h-11 focus:ring-gray-100 focus:ring-2 focus:outline-none">
                    <!-- SVG for minus -->
                    <svg class="w-3 h-3 text-gray-900 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 2">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 1h16"/>
                    </svg>
                </button>
                <input type="text" x-model="value" @input.debounce="$dispatch('cartppdate')" data-price={product.Price} data-product-id={product.Id} class="bg-gray-50 border-x-0 border-gray-300 h-11 text-center text-gray-900 block w-full dark:bg-gray-700" placeholder="1"  required />
                <button 
                @click={fmt.Sprintf("value = value + 1; $dispatch('cartppdate', {id: '%s', value: value})", product.Id)}
                 type="button" class="increment-button bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 border border-gray-300 rounded-r-lg p-3 h-11 focus:ring-gray-100 focus:ring-2 focus:outline-none">
                    <!-- SVG for plus -->
                    <svg class="w-3 h-3 text-gray-900 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 18">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 1v16M1 9h16"/>
                    </svg>
                </button>
            </div>
        </form>
        
    </div>
}

script BuyButtonClick() {
        document.getElementById("buy-button").addEventListener('click', function() {
            let productQuantityList =[]
            document.querySelectorAll('input[data-price]').forEach(input => {
                const price = parseFloat(input.getAttribute('data-price'));
                const quantity = parseInt(input.value) || 0;
                productQuantityList.push({id: input.getAttribute('data-product-id'), quantity: quantity});
            });
            let totalCash = document.getElementById("total-cash").innerText;
            let cartSum = Alpine.store('cart').value;
            // check if the total cash available is less than the shopping cart value
            if (parseInt(totalCash) <= parseInt(cartSum)) {
                // if it is not, then display an error message
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'You do not have enough cash to checkout!',
                })
                return 
            }
                // if it is, then proceed to checkout
                Swal.fire({
                    title: 'Are you sure?',
                    text: "You are about to checkout! The items will cost you $" + cartSum + ". Are you sure you want to proceed?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, checkout!'
                }).then((result) => {
                    if (!result.isConfirmed) {
                        return 
                    }
                    fetch("/validation/api/purchase", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                            },
                            body: JSON.stringify(productQuantityList),
                    }).then((response) => {
                            if (!response.ok) {
                                throw new Error("Network response was not ok.");
                            }
                       
                            Swal.fire({
                            title: 'Success!',
                            text: 'You have successfully checked out!',
                            icon: 'success',
                            confirmButtonColor: '#3085d6',
                            }).then((result) => {
                            
                                // update the total cash available
                                htmx.trigger("#total-cash", "update-total-cash", {});
                                // and reset the shopping cart value
                                document.getElementById("checkout-sum").innerText = 0;
                                // Reset the quantity of the items
                                document.getElementById("id1").value = 0;
                                document.getElementById("id2").value = 0;
                            })
                    }).catch((error) => {
                            Swal.fire({
                                icon: 'error',
                                title: 'Oops...',
                                text: 'There was an error processing your request!',
                            })
                            console.error("There was an error!", error);
                             
                    });
                        
                })
        });
}
