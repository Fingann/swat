package traversal

import "fmt"



templ Page() {
    <div id="root" class="min-h-screen bg-gray-100">
        <div class="bg-indigo-600">
            <div class="max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8">
                <h1 class="text-2xl font-bold text-white">File Upload System</h1>
            </div>
        </div>
        <div class="max-w-7xl mx-auto py-8 sm:px-6 lg:px-8">
            @UploadForm()
            @FileList()
        </div>
    </div>
}

templ UploadForm() {
    <button id="uploadButton" class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
        Select file to upload
    </button>
    <div id="upload-status"></div>
    <script>
    document.getElementById('uploadButton').addEventListener('click', async () => {
        const { value: file } = await Swal.fire({
            title: "Select image",
            input: "file",
            inputAttributes: {
                "aria-label": "Upload your profile picture"
            }
        });

        if (file) {
            const reader = new FileReader();
            reader.onload = (e) => { 
                // After displaying the image, proceed to upload
                uploadFile(file);
            };
            reader.readAsDataURL(file);
        }
    });

    function uploadFile(file) {
        // Create FormData object and append the file
        let formData = new FormData();
        formData.append('file', file);

        // Use fetch API to send the file to the server
        fetch('/traversal/upload', {
            method: 'POST',
            body: formData,
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            //dispatch a custom event to update the file list
            return response.text();
        })
        .then(result => {
            // replace fileList with the updated content
            fileList=document.getElementById('fileList')
            fileList.innerHTML = result;
            // Process the updated content
        
            htmx.process(fileList);
            // Handle success. You might want to update the UI to reflect the successful upload.
            Swal.fire('Success', 'File uploaded successfully', 'success');
        })
        .catch(error => {
            // Handle errors, such as displaying a message to the user
            console.error('Error during file upload:', error);
            Swal.fire('Error', 'There was an error uploading the file', 'error');
        });
    }
</script>

}


type UploadedFile struct {
    Name string
    Size int64
}

func BytesToHumanReadable(size int64) string {
    units := []string{"B", "KB", "MB", "GB", "TB", "PB", "EB"}
    var i int
    for i = 0; size >= 1024 && i < len(units)-1; i++ {
        size /= 1024
    }
    return fmt.Sprintf("%d %s", size, units[i])
}

templ FileList() {
    <div hx-sse="connect:/traversal/sse">
    <div class="mt-5">
        <h2 class="text-lg font-semibold text-gray-900 mb-4">Opplastet Filer</h2>
        <div class="grid grid-cols-1 gap-4" hx-get="/traversal/list/items" hx-trigger="load,sse:upload" hx-swap="innerHTML" id="fileList">
            // Placeholder for dynamic content
        </div>
    </div>
    </div>
}

templ ListItems(files []UploadedFile) {
   for _, file := range files {
        <div class="bg-white overflow-hidden shadow rounded-lg">
            <div class="p-4 flex justify-between items-center">
                <div class="flex-1 truncate">
                    <div class="flex items-center space-x-3">
                        <h3 class="text-sm font-medium text-gray-900 truncate">{file.Name}</h3>
                    </div>
                </div>
                <a href={ templ.SafeURL(fmt.Sprintf("/traversal/download?file=%s", file.Name)) } class="ml-2 bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 text-white font-bold py-2 px-4 rounded" download>
                    Last Ned
                </a>

            </div>
        </div>
    }
}